<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>维京博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.viking666.com/"/>
  <updated>2018-07-21T02:01:22.337Z</updated>
  <id>http://blog.viking666.com/</id>
  
  <author>
    <name>wsqy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ubuntu下部署django项目</title>
    <link href="http://blog.viking666.com/2018/ubuntu%E4%B8%8B%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE/"/>
    <id>http://blog.viking666.com/2018/ubuntu下部署django项目/</id>
    <published>2018-07-16T03:51:34.000Z</published>
    <updated>2018-07-21T02:01:22.337Z</updated>
    
    <content type="html"><![CDATA[<p>参考<a href="http://www.jianshu.com/" target="_blank" rel="noopener">简书</a>作者Gevin 的文章 <a href="http://www.jianshu.com/p/e6ff4a28ab5a" target="_blank" rel="noopener">基于nginx和uWSGI在Ubuntu上部署Django</a></p><h4 id="一-前期准备"><a href="#一-前期准备" class="headerlink" title="一 前期准备"></a>一 前期准备</h4><ol><li>nginx<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">安装</span><br><span class="line">sudo apt-get install nginx</span><br><span class="line">启动、停止和重启</span><br><span class="line">sudo /etc/init.d/nginx start</span><br><span class="line">sudo /etc/init.d/nginx stop</span><br><span class="line">sudo /etc/init.d/nginx restart</span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">sudo service nginx start</span><br><span class="line">sudo service nginx stop</span><br><span class="line">sudo service nginx restart</span><br></pre></td></tr></table></figure></li></ol><p>2 安装python的一些依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br><span class="line">sudo apt-get install python3-venv</span><br><span class="line">sudo apt-get install python-dev</span><br></pre></td></tr></table></figure></p><p>3.绑定ip到blog.viking666.com</p><p>4.在/soft目录下创建一个虚拟环境(目录权限设置好)<br><code>sudo python3 -m venv blog</code><br>激活虚拟环境<br><code>source /soft/blog/bin/activate</code><br>装一些包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django==1.8</span><br><span class="line">pip install uwsgi</span><br></pre></td></tr></table></figure></p><p>5.在/www下新建一个django项目(目录权限设置好)<br><code>django-admin startproject myblog</code><br><a id="more"></a></p><h4 id="二-基于uWSGI和nginx部署Django"><a href="#二-基于uWSGI和nginx部署Django" class="headerlink" title="二. 基于uWSGI和nginx部署Django"></a>二. 基于uWSGI和nginx部署Django</h4><h5 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h5><p><code>the web client &lt;-&gt; the web server(nginx) &lt;-&gt; the socket &lt;-&gt; uwsgi &lt;-&gt; Django</code></p><h5 id="2-基本测试"><a href="#2-基本测试" class="headerlink" title="2.基本测试"></a>2.基本测试</h5><p>测试uWSGI是否正常<br>在myblog项目的根目录下创建test.py(/www/myblog/test.py)文件，添加源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># test.py</span><br><span class="line">def application(env, start_response):</span><br><span class="line">    start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;,&apos;text/html&apos;)])</span><br><span class="line">    # return [&quot;Hello World&quot;] # python2</span><br><span class="line">    return [b&quot;Hello World&quot;] # python3</span><br></pre></td></tr></table></figure></p><p>然后，Run uWSGI:</p><p><code>uwsgi --http :8000 --wsgi-file test.py</code><br>参数含义:</p><ul><li>http :8000: 使用http协议，8000端口</li><li>wsgi-file test.py: 加载指定文件 test.py</li></ul><p>打开下面url，浏览器上应该显示hello world<br><code>blog.viking666.com:8000</code><br>如果显示正确，说明下面3个环节是通畅的：</p><p><code>the web client &lt;-&gt; uWSGI &lt;-&gt; Python</code></p><p>测试Django项目是否正常<br>首先确保project本身是正常的：</p><p><code>python manage.py runserver 0.0.0.0:8000</code><br>如果没问题，使用uWSGI把project拉起来：</p><p><code>uwsgi --http :8000 --module myblog.wsgi</code></p><ul><li>module myblog.wsgi: 加载wsgi module</li></ul><p>如果project能够正常被拉起，说明以下环节是通的：</p><p><code>the web client &lt;-&gt; uWSGI &lt;-&gt; Django</code></p><h4 id="三-配置nginx"><a href="#三-配置nginx" class="headerlink" title="三.配置nginx"></a>三.配置nginx</h4><p>安装nginx完成后，如果能正常打开<code>blog.viking666.com</code>，说明下面环节是通畅的：</p><p><code>the web client &lt;-&gt; the web server</code></p><p>增加nginx配置</p><p>将<code>uwsgi_params</code>文件拷贝到项目文件夹下(/www/myblog)。<code>uwsgi_params</code>文件在<code>/etc/nginx/</code>目录下，<br>在项目文件夹下创建文件夹下创建logm目录 并在里面创建<code>myblog.conf</code>(<code>/www/myblog/log/myblog.conf</code>),填入并修改下面内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">upstream django_myblog &#123;</span><br><span class="line">    server unix:///www/myblog/log/myblog.sock; # for a file socket</span><br><span class="line">    # server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">       listen 80;</span><br><span class="line"></span><br><span class="line">       server_name blog.viking666.com;</span><br><span class="line">       charset     utf-8;</span><br><span class="line">       # max upload size</span><br><span class="line">       client_max_body_size 75M;   # adjust to taste</span><br><span class="line">       access_log /www/myblog/log/nginx_access.log;</span><br><span class="line">       error_log /www/myblog/log/nginx_error.log;</span><br><span class="line">       location /media  &#123;</span><br><span class="line">            alias /www/myblog/media/;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /static &#123;</span><br><span class="line">            alias /www/myblog/static/;</span><br><span class="line">        &#125;</span><br><span class="line">       # Finally, send all non-media requests to the Django server.</span><br><span class="line">       location / &#123;</span><br><span class="line">           uwsgi_pass  django_myblog;</span><br><span class="line">           include     /www/myblog/uwsgi_params; # the uwsgi_params file you installed</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个configuration文件告诉nginx从文件系统中拉起media和static文件作为服务，同时相应django的request</p><p>在<code>/etc/nginx/sites-enabled</code>目录下创建本文件的连接，使<code>nginx</code>能够使用它：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /www/myblog/log/myblog.conf /etc/nginx/sites-enabled/</span><br></pre></td></tr></table></figure></p><p>部署static文件<br>在django的setting文件中，添加下面一行内容：</p><p><code>STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)</code><br>然后运行：</p><p><code>python manage.py collectstatic</code></p><p>测试nginx<br>首先重启nginx服务：</p><p><code>sudo /etc/init.d/nginx restart</code></p><p>然后检查media文件是否已经正常拉起：<br>在目录<code>/www/myblog/media</code> directory下添加文件meida.png，然后访问<code>blog.viking666.com:8000/media/media.png</code> ，成功后进行下一步测试。</p><h4 id="四-nginx-and-uWSGI-and-test-py"><a href="#四-nginx-and-uWSGI-and-test-py" class="headerlink" title="四.nginx and uWSGI and test.py"></a>四.nginx and uWSGI and test.py</h4><p>执行下面代码测试能否让<code>nginx</code>在页面上显示<code>hello, world</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --socket :8001 --wsgi-file test.py</span><br></pre></td></tr></table></figure></p><p>访问blog.viking666.com:8000 ,如果显示<code>hello world</code>，则下面环节是否通畅:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">the web client &lt;-&gt; the web server &lt;-&gt; the socket &lt;-&gt; uWSGI &lt;-&gt; Python</span><br></pre></td></tr></table></figure></p><p>用<code>UNIX socket</code>取代<code>TCP port</code><br>对<code>myblog.conf</code>做如下修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server unix:///path/to/your/mysite/mysite.sock; # for a file socket</span><br><span class="line"># server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first)</span><br></pre></td></tr></table></figure></p><p>重启<code>nginx</code>，并在此运行<code>uWSGI</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --socket mysite.sock --wsgi-file test.py</span><br></pre></td></tr></table></figure></p><p>打开 <code>blog.viking666.com:8000</code> ，看看是否成功</p><h5 id="如果没有成功"><a href="#如果没有成功" class="headerlink" title="如果没有成功:"></a>如果没有成功:</h5><p>检查 nginx error<br><code>log(/var/log/nginx/error.log)</code>。如果错误如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connect() to unix:///path/to/your/mysite/mysite.sock failed (13: Permission</span><br><span class="line">denied)</span><br></pre></td></tr></table></figure></p><p>添加socket权限再次运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=666 # (very permissive)</span><br></pre></td></tr></table></figure></p><p>or<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=664 # (more sensible)</span><br></pre></td></tr></table></figure></p><h4 id="五-Running-the-Django-application-with-uswgi-and-nginx"><a href="#五-Running-the-Django-application-with-uswgi-and-nginx" class="headerlink" title="五.Running the Django application with uswgi and nginx"></a>五.Running the Django application with uswgi and nginx</h4><p>如果上面一切都显示正常，则下面命令可以拉起django application<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --socket mysite.sock --module mysite.wsgi --chmod-socket=664</span><br><span class="line">Configuring uWSGI to run with a .ini file</span><br></pre></td></tr></table></figure></p><p>每次都运行上面命令拉起django application实在麻烦，使用.ini文件能简化工作，方法如下：</p><p>在log目录下创建文件myblog.ini，填入并修改下面内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi]</span><br><span class="line">vhost = false</span><br><span class="line"># plugins = python</span><br><span class="line">socket=/www/myblog/log/myblog.sock</span><br><span class="line">chmod-socket = 666</span><br><span class="line">enable-threads = true</span><br><span class="line">master=true</span><br><span class="line">processes = 2</span><br><span class="line">workers=5 </span><br><span class="line">harakiri=30</span><br><span class="line">limit-as 128</span><br><span class="line">max-requests=10000</span><br><span class="line">daemonize=/www/myblog/log/myblog.log</span><br><span class="line">pidfile=/www/myblog/log/myblog.pid</span><br><span class="line">wsgi-file=/www/myblog/myblog/wsgi.py</span><br><span class="line">virtualenv=/soft/blog</span><br><span class="line">chdir=/www/myblog</span><br><span class="line"># clear environment on exit</span><br><span class="line">vacuum= true</span><br></pre></td></tr></table></figure></p><p>现在，只要执行以下命令，就能够拉起django application：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --ini myblog.ini # the --ini option is used to specify a file</span><br></pre></td></tr></table></figure></p><p>Make uWSGI startup when the system boots<br>编辑文件<code>/etc/rc.local</code>, 添加下面内容到这行代码之前<code>exit 0</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/bin/uwsgi --socket /path/to/mysite.sock --module /path/to/mysite.wsgi --chmod-socket=666</span><br></pre></td></tr></table></figure></p><p>uWSGI的更多配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">env = DJANGO_SETTINGS_MODULE=mysite.settings # set an environment variable</span><br><span class="line">pidfile = /tmp/project-master.pid # create a pidfile</span><br><span class="line">harakiri = 20 # respawn processes taking more than 20 seconds</span><br><span class="line">limit-as = 128 # limit the project to 128 MB</span><br><span class="line">max-requests = 5000 # respawn processes after serving 5000 requests</span><br><span class="line">daemonize = /var/log/uwsgi/yourproject.log # background the process &amp; log</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考&lt;a href=&quot;http://www.jianshu.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;简书&lt;/a&gt;作者Gevin 的文章 &lt;a href=&quot;http://www.jianshu.com/p/e6ff4a28ab5a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;基于nginx和uWSGI在Ubuntu上部署Django&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;一-前期准备&quot;&gt;&lt;a href=&quot;#一-前期准备&quot; class=&quot;headerlink&quot; title=&quot;一 前期准备&quot;&gt;&lt;/a&gt;一 前期准备&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;nginx&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;安装&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install nginx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;启动、停止和重启&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo /etc/init.d/nginx start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo /etc/init.d/nginx stop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo /etc/init.d/nginx restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或者&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service nginx start&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service nginx stop&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service nginx restart&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2 安装python的一些依赖&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install python3-pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install python3-venv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install python-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.绑定ip到blog.viking666.com&lt;/p&gt;
&lt;p&gt;4.在/soft目录下创建一个虚拟环境(目录权限设置好)&lt;br&gt;&lt;code&gt;sudo python3 -m venv blog&lt;/code&gt;&lt;br&gt;激活虚拟环境&lt;br&gt;&lt;code&gt;source /soft/blog/bin/activate&lt;/code&gt;&lt;br&gt;装一些包&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install django==1.8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install uwsgi&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5.在/www下新建一个django项目(目录权限设置好)&lt;br&gt;&lt;code&gt;django-admin startproject myblog&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="django" scheme="http://blog.viking666.com/categories/django/"/>
    
    
      <category term="django" scheme="http://blog.viking666.com/tags/django/"/>
    
      <category term="python" scheme="http://blog.viking666.com/tags/python/"/>
    
      <category term="django部署" scheme="http://blog.viking666.com/tags/django%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>github pages + hexo搭建个人博客</title>
    <link href="http://blog.viking666.com/2018/github-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://blog.viking666.com/2018/github-pages-hexo搭建个人博客/</id>
    <published>2018-07-14T02:38:18.000Z</published>
    <updated>2018-07-14T09:41:44.113Z</updated>
    
    <content type="html"><![CDATA[<p>参考<a href="https://blog.csdn.net/LemonXQ/article/details/72676005" target="_blank" rel="noopener">Hexo静态博客搭建+个人定制</a><br>参考<a href="https://blog.csdn.net/mango_haoming/article/details/78207534" target="_blank" rel="noopener">Hexo+Pages静态博客-Next主题篇</a></p><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="确保已经安装node及git"><a href="#确保已经安装node及git" class="headerlink" title="确保已经安装node及git"></a>确保已经安装<code>node</code>及<code>git</code></h3><h3 id="npm安装Hexo"><a href="#npm安装Hexo" class="headerlink" title="npm安装Hexo"></a><code>npm</code>安装<code>Hexo</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="建立博客项目"><a href="#建立博客项目" class="headerlink" title="建立博客项目"></a>建立博客项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>等安装完依赖后 项目就算初始化好了,博客的文件结构如下:<br><img src="/images/github pages + hexo搭建个人博客/项目初始目录结构.png" alt="项目初始目录结构"></p><h3 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h3><p><code>_config.yml</code>就是博客项目的全局配置文件, 比如博客标题、子标题、描述、作者、语言、时区、博客地址和根地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: 维京博客</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author: qiyuan</span><br><span class="line">language: zh-Hans # 语言设置</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="尝试预览"><a href="#尝试预览" class="headerlink" title="尝试预览"></a>尝试预览</h3><h4 id="Hexo常用的命令如下"><a href="#Hexo常用的命令如下" class="headerlink" title="Hexo常用的命令如下"></a>Hexo常用的命令如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo clean 清除缓存</span><br><span class="line">hexo generate 生成静态文件</span><br><span class="line">hexo deploy 部署</span><br><span class="line">hexo server 本地预览</span><br></pre></td></tr></table></figure><p>在开发过程中 使用<code>hexo server</code>或者<code>hexo s</code>即可本地预览,由于<code>hexo</code>默认存在一篇文章<code>hello-world</code>，所以我们可以看下情况:<br><img src="/images/github pages + hexo搭建个人博客/预览默认项目.png" alt="预览默认项目"></p><h3 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;文章标题&quot;</span><br></pre></td></tr></table></figure><p>执行命令后 会在<code>source/_post</code>目录下创建同名的<code>.md</code>文件,这就是文章的内容，使用makedown编辑好就可以<br>编辑完成后 预览查看效果<code>hexo s</code><br><img src="/images/github pages + hexo搭建个人博客/创建新文章.png" alt="创建新文章"></p><h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><p>直接删除<code>source/_posts</code>文件夹下的<code>.md</code>文件即可,但是请注意, <code>source/_posts</code>下不能为空,所以请在发布一篇文章后再删除默认的文章</p><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><ul><li><p>在项目的根目录 git clone</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>去github主页下载并放入themes下的文件夹中</p></li></ul><h4 id="更换主题-1"><a href="#更换主题-1" class="headerlink" title="更换主题"></a>更换主题</h4><p>在<code>_config.yml</code>文件中找到 配置项<code>theme</code>改成 <code>next</code>即可</p><h4 id="更换风格"><a href="#更换风格" class="headerlink" title="更换风格"></a>更换风格</h4><p><code>next</code>有四种风格 <code>Muse</code> <code>Mist</code> <code>Pisces</code> <code>Gemini</code> 如果需要更改风格 需要在主题文件夹下的<code>_config.yml</code>中找到<code>scheme</code>字段修改</p><ul><li>Muse  — 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白<br><img src="/images/github pages + hexo搭建个人博客/Muse风格.png" alt="Muse风格"></li><li>Mist   — Muse 的紧凑版本，整洁有序的单栏外观<br><img src="/images/github pages + hexo搭建个人博客/Mist风格.png" alt="Mist风格"></li><li>Pisces  — 双栏 Scheme，小家碧玉似的清新<br><img src="/images/github pages + hexo搭建个人博客/Pisces风格.png" alt="Pisces风格"></li><li>Gemini   — Pisces版本基础上 内容块更宽些<br><img src="/images/github pages + hexo搭建个人博客/Gemini风格.png" alt="Gemini风格"></li></ul><h2 id="上传github-pages"><a href="#上传github-pages" class="headerlink" title="上传github pages"></a>上传github pages</h2><h3 id="绑定自定义域名"><a href="#绑定自定义域名" class="headerlink" title="绑定自定义域名"></a>绑定自定义域名</h3><ul><li>首先 在<code>source</code>目录下创建一个新文件<code>CNAME</code>填写自已的域名blog.test.com</li><li>添加一条域名解析, 注意类型是CNAME<br><img src="/images/github pages + hexo搭建个人博客/添加域名解析.png" alt="添加域名解析"></li></ul><h2 id="更换电脑"><a href="#更换电脑" class="headerlink" title="更换电脑"></a>更换电脑</h2><h3 id="将原电脑上的项目copy新电脑上-保留如下目录即可："><a href="#将原电脑上的项目copy新电脑上-保留如下目录即可：" class="headerlink" title="将原电脑上的项目copy新电脑上, 保留如下目录即可："></a>将原电脑上的项目copy新电脑上, 保留如下目录即可：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure><h3 id="确认在新电脑上已经配置好hexo环境-参考-环境安装"><a href="#确认在新电脑上已经配置好hexo环境-参考-环境安装" class="headerlink" title="确认在新电脑上已经配置好hexo环境 参考[环境安装]"></a>确认在新电脑上已经配置好hexo环境 参考[环境安装]</h3><h3 id="模块安装"><a href="#模块安装" class="headerlink" title="模块安装"></a>模块安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="增加社会化评论框"><a href="#增加社会化评论框" class="headerlink" title="增加社会化评论框"></a>增加社会化评论框</h2><h3 id="Livere"><a href="#Livere" class="headerlink" title="Livere"></a>Livere</h3><p>自从多说关闭后国内就没有啥好的社会化评论框了, disqus一直不错可惜国内用户用不着。百度一搜很多人都从多说转移到了 Livere 这是韩国的一款评论框，官网支持中文不说, 也支持QQ、微信、微博、豆瓣、百度等中国的一大波社交账户 非常赞。</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>去<a href="https://livere.com" target="_blank" rel="noopener">Livere</a>官网注册Livere账号。</li><li>选择City版（免费），安装</li><li>进入管理页面-&gt;代码管理-&gt;一般网站，复制<code>data-uid</code><h4 id="加入到hexo中"><a href="#加入到hexo中" class="headerlink" title="加入到hexo中"></a>加入到<code>hexo</code>中</h4></li><li>如果选择的<code>next</code>主题的话,他已经加入了<code>livere</code>支持,只需要复制<code>data-uid</code>到主题文件夹下的<code>_config.yml</code>文件的livere_uid即可<h4 id="其他主题"><a href="#其他主题" class="headerlink" title="其他主题"></a>其他主题</h4>其他主题，请去搜索或者查找官方说明,也可借鉴<a href="https://blog.csdn.net/lemonxq/article/details/78578617" target="_blank" rel="noopener">Hexo之使用Livere评论代替多说评论</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考&lt;a href=&quot;https://blog.csdn.net/LemonXQ/article/details/72676005&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo静态博客搭建+个人定制&lt;/a&gt;&lt;br&gt;参考&lt;a href=&quot;https://blog.csdn.net/mango_haoming/article/details/78207534&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo+Pages静态博客-Next主题篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;环境安装&quot;&gt;&lt;a href=&quot;#环境安装&quot; class=&quot;headerlink&quot; title=&quot;环境安装&quot;&gt;&lt;/a&gt;环境安装&lt;/h2&gt;&lt;h3 id=&quot;确保已经安装node及git&quot;&gt;&lt;a href=&quot;#确保已经安装node及git&quot; class=&quot;headerlink&quot; title=&quot;确保已经安装node及git&quot;&gt;&lt;/a&gt;确保已经安装&lt;code&gt;node&lt;/code&gt;及&lt;code&gt;git&lt;/code&gt;&lt;/h3&gt;&lt;h3 id=&quot;npm安装Hexo&quot;&gt;&lt;a href=&quot;#npm安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;npm安装Hexo&quot;&gt;&lt;/a&gt;&lt;code&gt;npm&lt;/code&gt;安装&lt;code&gt;Hexo&lt;/code&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;建立博客项目&quot;&gt;&lt;a href=&quot;#建立博客项目&quot; class=&quot;headerlink&quot; title=&quot;建立博客项目&quot;&gt;&lt;/a&gt;建立博客项目&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo init &amp;lt;folder&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd &amp;lt;folder&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等安装完依赖后 项目就算初始化好了,博客的文件结构如下:&lt;br&gt;&lt;img src=&quot;/images/github pages + hexo搭建个人博客/项目初始目录结构.png&quot; alt=&quot;项目初始目录结构&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;配置博客&quot;&gt;&lt;a href=&quot;#配置博客&quot; class=&quot;headerlink&quot; title=&quot;配置博客&quot;&gt;&lt;/a&gt;配置博客&lt;/h3&gt;&lt;p&gt;&lt;code&gt;_config.yml&lt;/code&gt;就是博客项目的全局配置文件, 比如博客标题、子标题、描述、作者、语言、时区、博客地址和根地址&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# Site&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: 维京博客&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subtitle:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;description:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;keywords:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;author: qiyuan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;language: zh-Hans # 语言设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;timezone: Asia/Shanghai&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="博客搭建" scheme="http://blog.viking666.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="博客搭建" scheme="http://blog.viking666.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="hexo" scheme="http://blog.viking666.com/tags/hexo/"/>
    
      <category term="next" scheme="http://blog.viking666.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>docker基础篇</title>
    <link href="http://blog.viking666.com/2018/docker%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://blog.viking666.com/2018/docker基础篇/</id>
    <published>2018-03-11T07:37:27.000Z</published>
    <updated>2018-07-21T02:37:55.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h3><p>ubuntu16.04是docker.io<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install docker.io</span><br></pre></td></tr></table></figure></p><p><img src="/images/docker基础篇/apt安装docker.png" alt="apt安装docker"></p><h3 id="查看当前的镜像"><a href="#查看当前的镜像" class="headerlink" title="查看当前的镜像"></a>查看当前的镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 增加 docker组</span><br><span class="line">sudo groupadd docker</span><br><span class="line"># 将当前用户加入docker组</span><br><span class="line">sudo gpasswd -a $&#123;USER&#125; docker</span><br><span class="line"># 重启docker服务</span><br><span class="line">sudo service docker restart</span><br><span class="line"># 切换当前会话到新 group</span><br><span class="line">newgrp - docker</span><br><span class="line"># 注意，最后一步是必须的，否则因为 groups 命令获取到的是缓存的组信息，刚添加的组信息未能生效</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="查看docker版本"><a href="#查看docker版本" class="headerlink" title="查看docker版本"></a>查看docker版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><img src="/images/docker基础篇/查看docker版本.png" alt="查看docker版本"></p><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：<code>http://hub-mirror.c.163.com</code>。<br>新版的 Docker 使用 <code>/etc/docker/daemon.json（Linux）</code> 或者 <code>%programdata%\docker\config\daemon.json（Windows）</code> 来配置 Daemon。<br>请在该配置文件中加入（没有该文件的话，请先建一个）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="搜索ubuntu镜像"><a href="#搜索ubuntu镜像" class="headerlink" title="搜索ubuntu镜像"></a>搜索ubuntu镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search ubuntu</span><br></pre></td></tr></table></figure><p><img src="/images/docker基础篇/搜索ubuntu镜像.png" alt=""></p><h3 id="拉取ubuntu"><a href="#拉取ubuntu" class="headerlink" title="拉取ubuntu"></a>拉取ubuntu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu:16.04</span><br></pre></td></tr></table></figure><p><img src="/images/docker基础篇/拉取ubuntu镜像.png" alt="拉取ubuntu镜像"></p><h3 id="进入ubuntu镜像"><a href="#进入ubuntu镜像" class="headerlink" title="进入ubuntu镜像"></a>进入ubuntu镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">### 更新</span><br></pre></td></tr></table></figure><p>apt-get update<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 安装该装的软件</span><br></pre></td></tr></table></figure></p><p>apt-get install wget xz-utils ruby build-essential libssl-dev libffi-dev libjpeg-dev libfreetype6-dev zlib1g-dev libreadline6 libreadline6-dev python3-dev libmysqlclient-dev(根据需求安装mysql依赖还是sqlite依赖) libsqlite-dev libsqlite3-dev libbz2-dev -y<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 下载python</span><br></pre></td></tr></table></figure></p><p>v=3.6.4<br>wget <a href="http://mirrors.sohu.com/python/$v/Python-$v.tar.xz" target="_blank" rel="noopener">http://mirrors.sohu.com/python/$v/Python-$v.tar.xz</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 解压 trz.xz文件</span><br></pre></td></tr></table></figure></p><p>tar xvJf Python-3.6.4.tar.xz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 编译</span><br></pre></td></tr></table></figure></p><p>./configure –enable-optimizations<br>make &amp;&amp; make install<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 更新软连接</span><br></pre></td></tr></table></figure></p><p>ln -s easy_install-3.6 easy_install<br>ln -s idle3 idle<br>ln -s pydoc3 pydoc<br>ln -s pip3 pip<br>ln -s python3 python<br>ln -s python3-config python-config</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 给自己编辑的保存一下</span><br></pre></td></tr></table></figure><p>docker commit -m=”has update” -a=”wsqy” e218edb10161 wsqy/ubuntu:v1<br>各个参数说明：</p><p>-m:提交的描述信息</p><p>-a:指定镜像作者</p><p>e218edb10161：容器ID</p><p>wsqy/ubuntu:v1:指定要创建的目标镜像名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images 命令来查看我们的新镜像 `wsqy/ubuntu:v1`：</span><br><span class="line">![这是多次之后的镜像列表](/images/docker基础篇/多次之后的镜像列表.png)</span><br><span class="line"></span><br><span class="line">### 存出镜像</span><br></pre></td></tr></table></figure></p><p>docker save -o xxx.tar [NAME]:[TAG]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 载入镜像</span><br></pre></td></tr></table></figure></p><p>docker load –input xxx.tar<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt; tar是归档命令 没有压缩的功能 现在压缩成tar.gz</span><br></pre></td></tr></table></figure></p><h1 id="tar-压缩成tar-gz"><a href="#tar-压缩成tar-gz" class="headerlink" title="tar 压缩成tar.gz"></a>tar 压缩成tar.gz</h1><p>tar -zcvf xxx.tar.gz xxx.tar</p><h1 id="tar-gz-解压成归档文件"><a href="#tar-gz-解压成归档文件" class="headerlink" title="tar.gz 解压成归档文件"></a>tar.gz 解压成归档文件</h1><p>gunzip xxx.tar.gz<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 上传镜像</span><br></pre></td></tr></table></figure></p><p>docker push [NAME]:[TAG]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 运行容器</span><br></pre></td></tr></table></figure></p><p>docker run -d -v /home/qy/Desktop/dockerTest/HelloProject:/HelloProject -w /HelloProject -p 8088:8088 wsqy/eros:v6 python manage.py runserver 0.0.0.0:8088<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">![运行容器](/images/docker基础篇/运行容器.png)</span><br><span class="line"></span><br><span class="line">运行后将返回容器id</span><br><span class="line">查看在运行中的容器</span><br></pre></td></tr></table></figure></p><p>docker ps<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">![docker运行的进程](/images/docker基础篇/docker运行的进程.png)</span><br><span class="line"></span><br><span class="line">看到了端口映射正确则可以访问下是否运行正常</span><br><span class="line">![成功拉起django的测试页](/images/docker基础篇/成功拉起django的测试页.png)</span><br><span class="line"></span><br><span class="line">命令详解:</span><br><span class="line">-d 后台运行</span><br><span class="line">-v 数据卷挂载到容器</span><br><span class="line">-w 指定容器的主目录</span><br><span class="line">-p 指定端口映射</span><br><span class="line"></span><br><span class="line">### 其他的常用命令</span><br><span class="line">#### 停止容器</span><br></pre></td></tr></table></figure></p><p>docker stop CONTAINER NAMEs</p><h1 id="经常需要-ctrl-c-才能停止成功"><a href="#经常需要-ctrl-c-才能停止成功" class="headerlink" title="经常需要 ctrl + c 才能停止成功"></a>经常需要 ctrl + c 才能停止成功</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 启动容器</span><br></pre></td></tr></table></figure><p>docker start CONTAINER NAMEs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 进入容器</span><br></pre></td></tr></table></figure></p><p>docker attach CONTAINER NAMEs<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#### 查看容器日志</span><br></pre></td></tr></table></figure></p><p>docker logs -f CONTAINER NAMEs<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装docker&quot;&gt;&lt;a href=&quot;#安装docker&quot; class=&quot;headerlink&quot; title=&quot;安装docker&quot;&gt;&lt;/a&gt;安装docker&lt;/h3&gt;&lt;p&gt;ubuntu16.04是docker.io&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install docker.io&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/docker基础篇/apt安装docker.png&quot; alt=&quot;apt安装docker&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;查看当前的镜像&quot;&gt;&lt;a href=&quot;#查看当前的镜像&quot; class=&quot;headerlink&quot; title=&quot;查看当前的镜像&quot;&gt;&lt;/a&gt;查看当前的镜像&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 增加 docker组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo groupadd docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 将当前用户加入docker组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo gpasswd -a $&amp;#123;USER&amp;#125; docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 重启docker服务&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo service docker restart&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 切换当前会话到新 group&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;newgrp - docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 注意，最后一步是必须的，否则因为 groups 命令获取到的是缓存的组信息，刚添加的组信息未能生效&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://blog.viking666.com/tags/docker/"/>
    
      <category term="ubuntu" scheme="http://blog.viking666.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>小飞机-Qt5配置</title>
    <link href="http://blog.viking666.com/2018/%E5%B0%8F%E9%A3%9E%E6%9C%BA-Qt5%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.viking666.com/2018/小飞机-Qt5配置/</id>
    <published>2018-03-08T01:32:02.000Z</published>
    <updated>2018-07-21T02:37:55.555Z</updated>
    
    <content type="html"><![CDATA[<p>参考csdn<a href="http://blog.csdn.net/xienaoban/article/details/54772942" target="_blank" rel="noopener">我的Linux入门之路 - 02.Shadowsocks-Qt5配置</a></p><p>这里我使用的是<a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki" target="_blank" rel="noopener">shadowsocks-Qt5版本</a>。毕竟是从win过渡过来的，一开始还是倾向GUI。<br>安装方法也异常简单，简单到我一开始不相信。（官方github上有安装文档。幸运的是，github可以直接访问）。三行代码即可解决，无需自己从github下载客户端。<br>首先打开终端（Ctrl+Alt+T）<br>然后分步运行以下三行命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:hzwhuang/ss-qt5</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install shadowsocks-qt5</span><br></pre></td></tr></table></figure></p><p>然后就安装完成了。从你的dash（左上角相当于win开始键的东西）上能找到他，拖到任务栏上创个快捷方式就好啦。打开后如下图（File菜单里有个import from gui-config.json，把你的文件导入就行了。比别的版本的ss好的是，它能导入多个服务器，而别的版本的ss的config文件貌似只能添加一个）：<br><img src="/images/小飞机-Qt5配置/界面.png" alt="界面"><br><a id="more"></a></p><h2 id="命令行-也可以启动客户端"><a href="#命令行-也可以启动客户端" class="headerlink" title="命令行 也可以启动客户端"></a>命令行 也可以启动客户端</h2><p>sslocal -c /opt/ss.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;*.*.*.*&quot;,</span><br><span class="line">  &quot;server_port&quot;: port_id,</span><br><span class="line">  &quot;local_port&quot;: port_id,</span><br><span class="line">  &quot;password&quot;: &quot;*********&quot;,</span><br><span class="line">  &quot;method&quot;: &quot;you_method&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="配置终端代理"><a href="#配置终端代理" class="headerlink" title="配置终端代理"></a>配置终端代理</h2><p>挂代理的东西不少，我使用的是Polipo，和shadowsocks的socks5搭配比较不错。<br>Polipo安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install polipo</span><br></pre></td></tr></table></figure></p><p>打开配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/polipo/config</span><br></pre></td></tr></table></figure></p><p>修改配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># This file only needs to list configuration variables that deviate</span><br><span class="line"># from the default values.  See /usr/share/doc/polipo/examples/config.sample</span><br><span class="line"># and &quot;polipo -v&quot; for variables you can tweak and further information.</span><br><span class="line"></span><br><span class="line">logSyslog = true</span><br><span class="line">logFile = /var/log/polipo/polipo.log</span><br><span class="line">socksParentProxy = &quot;127.0.0.1:1080&quot;</span><br><span class="line">socksProxyType = socks5</span><br><span class="line">logLevel=4</span><br></pre></td></tr></table></figure></p><p>然后重启polipo：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo service polipo stop</span><br><span class="line">sudo service polipo start</span><br></pre></td></tr></table></figure></p><p>Polipo默认的代理地址是 <code>http_proxy=http://localhost:8123</code><br>那么每次对于希望 番羽 土啬 的指令，只需在前面加一句<code>http_proxy=http://localhost:8123</code> 即可。当然每次输入这么一长串这比较麻烦，可以打开～/.bashrc，在最后面添加一句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alias fanqiang=&quot;http_proxy=http://localhost:8123&quot;</span><br></pre></td></tr></table></figure></p><p>这样以后只需在需要 番羽 土啬 的指令前面加一句fanqiang即可了。<br>先来测试下有没有成功，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fanqiang curl ip.gs</span><br></pre></td></tr></table></figure></p><p>如果不想每条指令都输入fanqiang，可以<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://localhost:8123</span><br></pre></td></tr></table></figure></p><h2 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h2><p>命令行执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gnome-session-properties</span><br></pre></td></tr></table></figure></p><p>打开的界面就像这样</p><p><img src="/images/小飞机-Qt5配置/linux添加自启动.png" alt=""><br>添加一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Shadowsocks-Qt5</span><br><span class="line">/usr/bin/ss-qt5</span><br><span class="line">Shadowsocks-Qt5</span><br></pre></td></tr></table></figure></p><p><img src="/images/小飞机-Qt5配置/启动应用程序首选项.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考csdn&lt;a href=&quot;http://blog.csdn.net/xienaoban/article/details/54772942&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的Linux入门之路 - 02.Shadowsocks-Qt5配置&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里我使用的是&lt;a href=&quot;https://github.com/shadowsocks/shadowsocks-qt5/wiki&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;shadowsocks-Qt5版本&lt;/a&gt;。毕竟是从win过渡过来的，一开始还是倾向GUI。&lt;br&gt;安装方法也异常简单，简单到我一开始不相信。（官方github上有安装文档。幸运的是，github可以直接访问）。三行代码即可解决，无需自己从github下载客户端。&lt;br&gt;首先打开终端（Ctrl+Alt+T）&lt;br&gt;然后分步运行以下三行命令。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo add-apt-repository ppa:hzwhuang/ss-qt5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install shadowsocks-qt5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后就安装完成了。从你的dash（左上角相当于win开始键的东西）上能找到他，拖到任务栏上创个快捷方式就好啦。打开后如下图（File菜单里有个import from gui-config.json，把你的文件导入就行了。比别的版本的ss好的是，它能导入多个服务器，而别的版本的ss的config文件貌似只能添加一个）：&lt;br&gt;&lt;img src=&quot;/images/小飞机-Qt5配置/界面.png&quot; alt=&quot;界面&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="shadowsocks" scheme="http://blog.viking666.com/categories/shadowsocks/"/>
    
      <category term="ubuntu" scheme="http://blog.viking666.com/categories/shadowsocks/ubuntu/"/>
    
    
      <category term="ubuntu" scheme="http://blog.viking666.com/tags/ubuntu/"/>
    
      <category term="shadowsocks" scheme="http://blog.viking666.com/tags/shadowsocks/"/>
    
      <category term="ssr" scheme="http://blog.viking666.com/tags/ssr/"/>
    
      <category term="fq" scheme="http://blog.viking666.com/tags/fq/"/>
    
      <category term="翻墙" scheme="http://blog.viking666.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="ssr服务端" scheme="http://blog.viking666.com/tags/ssr%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
      <category term="linux" scheme="http://blog.viking666.com/tags/linux/"/>
    
  </entry>
  
</feed>
