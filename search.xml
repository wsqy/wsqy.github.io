<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ubuntu下部署django项目]]></title>
    <url>%2F2018%2Fubuntu%E4%B8%8B%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[参考简书作者Gevin 的文章 基于nginx和uWSGI在Ubuntu上部署Django 一 前期准备 nginx1234567891011安装sudo apt-get install nginx启动、停止和重启sudo /etc/init.d/nginx startsudo /etc/init.d/nginx stopsudo /etc/init.d/nginx restart或者sudo service nginx startsudo service nginx stopsudo service nginx restart 2 安装python的一些依赖123sudo apt-get install python3-pipsudo apt-get install python3-venvsudo apt-get install python-dev 3.绑定ip到blog.viking666.com 4.在/soft目录下创建一个虚拟环境(目录权限设置好)sudo python3 -m venv blog激活虚拟环境source /soft/blog/bin/activate装一些包12pip install django==1.8pip install uwsgi 5.在/www下新建一个django项目(目录权限设置好)django-admin startproject myblog 二. 基于uWSGI和nginx部署Django1.原理the web client &lt;-&gt; the web server(nginx) &lt;-&gt; the socket &lt;-&gt; uwsgi &lt;-&gt; Django 2.基本测试测试uWSGI是否正常在myblog项目的根目录下创建test.py(/www/myblog/test.py)文件，添加源码如下：12345# test.pydef application(env, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;,&apos;text/html&apos;)]) # return [&quot;Hello World&quot;] # python2 return [b&quot;Hello World&quot;] # python3 然后，Run uWSGI: uwsgi --http :8000 --wsgi-file test.py参数含义: http :8000: 使用http协议，8000端口 wsgi-file test.py: 加载指定文件 test.py 打开下面url，浏览器上应该显示hello worldblog.viking666.com:8000如果显示正确，说明下面3个环节是通畅的： the web client &lt;-&gt; uWSGI &lt;-&gt; Python 测试Django项目是否正常首先确保project本身是正常的： python manage.py runserver 0.0.0.0:8000如果没问题，使用uWSGI把project拉起来： uwsgi --http :8000 --module myblog.wsgi module myblog.wsgi: 加载wsgi module 如果project能够正常被拉起，说明以下环节是通的： the web client &lt;-&gt; uWSGI &lt;-&gt; Django 三.配置nginx安装nginx完成后，如果能正常打开blog.viking666.com，说明下面环节是通畅的： the web client &lt;-&gt; the web server 增加nginx配置 将uwsgi_params文件拷贝到项目文件夹下(/www/myblog)。uwsgi_params文件在/etc/nginx/目录下，在项目文件夹下创建文件夹下创建logm目录 并在里面创建myblog.conf(/www/myblog/log/myblog.conf),填入并修改下面内容：12345678910111213141516171819202122232425262728upstream django_myblog &#123; server unix:///www/myblog/log/myblog.sock; # for a file socket # server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first)&#125;server &#123; listen 80; server_name blog.viking666.com; charset utf-8; # max upload size client_max_body_size 75M; # adjust to taste access_log /www/myblog/log/nginx_access.log; error_log /www/myblog/log/nginx_error.log; location /media &#123; alias /www/myblog/media/; &#125; location /static &#123; alias /www/myblog/static/; &#125; # Finally, send all non-media requests to the Django server. location / &#123; uwsgi_pass django_myblog; include /www/myblog/uwsgi_params; # the uwsgi_params file you installed &#125;&#125; 这个configuration文件告诉nginx从文件系统中拉起media和static文件作为服务，同时相应django的request 在/etc/nginx/sites-enabled目录下创建本文件的连接，使nginx能够使用它：1sudo ln -s /www/myblog/log/myblog.conf /etc/nginx/sites-enabled/ 部署static文件在django的setting文件中，添加下面一行内容： STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)然后运行： python manage.py collectstatic 测试nginx首先重启nginx服务： sudo /etc/init.d/nginx restart 然后检查media文件是否已经正常拉起：在目录/www/myblog/media directory下添加文件meida.png，然后访问blog.viking666.com:8000/media/media.png ，成功后进行下一步测试。 四.nginx and uWSGI and test.py执行下面代码测试能否让nginx在页面上显示hello, world1uwsgi --socket :8001 --wsgi-file test.py 访问blog.viking666.com:8000 ,如果显示hello world，则下面环节是否通畅:1the web client &lt;-&gt; the web server &lt;-&gt; the socket &lt;-&gt; uWSGI &lt;-&gt; Python 用UNIX socket取代TCP port对myblog.conf做如下修改：12server unix:///path/to/your/mysite/mysite.sock; # for a file socket# server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first) 重启nginx，并在此运行uWSGI1uwsgi --socket mysite.sock --wsgi-file test.py 打开 blog.viking666.com:8000 ，看看是否成功 如果没有成功:检查 nginx errorlog(/var/log/nginx/error.log)。如果错误如下：12connect() to unix:///path/to/your/mysite/mysite.sock failed (13: Permissiondenied) 添加socket权限再次运行：1uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=666 # (very permissive) or1uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=664 # (more sensible) 五.Running the Django application with uswgi and nginx如果上面一切都显示正常，则下面命令可以拉起django application12uwsgi --socket mysite.sock --module mysite.wsgi --chmod-socket=664Configuring uWSGI to run with a .ini file 每次都运行上面命令拉起django application实在麻烦，使用.ini文件能简化工作，方法如下： 在log目录下创建文件myblog.ini，填入并修改下面内容：12345678910111213141516171819[uwsgi]vhost = false# plugins = pythonsocket=/www/myblog/log/myblog.sockchmod-socket = 666enable-threads = truemaster=trueprocesses = 2workers=5 harakiri=30limit-as 128max-requests=10000daemonize=/www/myblog/log/myblog.logpidfile=/www/myblog/log/myblog.pidwsgi-file=/www/myblog/myblog/wsgi.pyvirtualenv=/soft/blogchdir=/www/myblog# clear environment on exitvacuum= true 现在，只要执行以下命令，就能够拉起django application：1uwsgi --ini myblog.ini # the --ini option is used to specify a file Make uWSGI startup when the system boots编辑文件/etc/rc.local, 添加下面内容到这行代码之前exit 0:1/usr/local/bin/uwsgi --socket /path/to/mysite.sock --module /path/to/mysite.wsgi --chmod-socket=666 uWSGI的更多配置123456env = DJANGO_SETTINGS_MODULE=mysite.settings # set an environment variablepidfile = /tmp/project-master.pid # create a pidfileharakiri = 20 # respawn processes taking more than 20 secondslimit-as = 128 # limit the project to 128 MBmax-requests = 5000 # respawn processes after serving 5000 requestsdaemonize = /var/log/uwsgi/yourproject.log # background the process &amp; log]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>python</tag>
        <tag>django部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github pages + hexo搭建个人博客]]></title>
    <url>%2F2018%2Fgithub-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[参考Hexo静态博客搭建+个人定制参考Hexo+Pages静态博客-Next主题篇 环境安装确保已经安装node及gitnpm安装Hexo1npm install -g hexo-cli 建立博客项目123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 等安装完依赖后 项目就算初始化好了,博客的文件结构如下: 配置博客_config.yml就是博客项目的全局配置文件, 比如博客标题、子标题、描述、作者、语言、时区、博客地址和根地址12345678# Sitetitle: 维京博客subtitle:description:keywords:author: qiyuanlanguage: zh-Hans # 语言设置timezone: Asia/Shanghai 尝试预览Hexo常用的命令如下1234hexo clean 清除缓存hexo generate 生成静态文件hexo deploy 部署hexo server 本地预览 在开发过程中 使用hexo server或者hexo s即可本地预览,由于hexo默认存在一篇文章hello-world，所以我们可以看下情况: 创建新文章1hexo new &quot;文章标题&quot; 执行命令后 会在source/_post目录下创建同名的.md文件,这就是文章的内容，使用makedown编辑好就可以编辑完成后 预览查看效果hexo s 删除文章直接删除source/_posts文件夹下的.md文件即可,但是请注意, source/_posts下不能为空,所以请在发布一篇文章后再删除默认的文章 更换主题next下载 在项目的根目录 git clone 1git clone https://github.com/iissnan/hexo-theme-next themes/next 去github主页下载并放入themes下的文件夹中 更换主题在_config.yml文件中找到 配置项theme改成 next即可 更换风格next有四种风格 Muse Mist Pisces Gemini 如果需要更改风格 需要在主题文件夹下的_config.yml中找到scheme字段修改 Muse — 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist — Muse 的紧凑版本，整洁有序的单栏外观 Pisces — 双栏 Scheme，小家碧玉似的清新 Gemini — Pisces版本基础上 内容块更宽些 上传github pages绑定自定义域名 首先 在source目录下创建一个新文件CNAME填写自已的域名blog.test.com 添加一条域名解析, 注意类型是CNAME 更换电脑将原电脑上的项目copy新电脑上, 保留如下目录即可：12345_config.ymlpackage.jsonscaffolds/source/themes/ 确认在新电脑上已经配置好hexo环境 参考[环境安装]模块安装12345678npm installnpm install hexo-deployer-git --savenpm install hexo-generator-search --savenpm install hexo-generator-searchdb --savenpm install hexo-generator-feed --savenpm install hexo-generator-baidu-sitemap --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-seo-friendly-sitemap --save 增加社会化评论框Livere自从多说关闭后国内就没有啥好的社会化评论框了, disqus一直不错可惜国内用户用不着。百度一搜很多人都从多说转移到了 Livere 这是韩国的一款评论框，官网支持中文不说, 也支持QQ、微信、微博、豆瓣、百度等中国的一大波社交账户 非常赞。 准备工作 去Livere官网注册Livere账号。 选择City版（免费），安装 进入管理页面-&gt;代码管理-&gt;一般网站，复制data-uid加入到hexo中 如果选择的next主题的话,他已经加入了livere支持,只需要复制data-uid到主题文件夹下的_config.yml文件的livere_uid即可其他主题其他主题，请去搜索或者查找官方说明,也可借鉴Hexo之使用Livere评论代替多说评论]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker基础篇]]></title>
    <url>%2F2018%2Fdocker%E5%9F%BA%E7%A1%80%E7%AF%87%2F</url>
    <content type="text"><![CDATA[安装dockerubuntu16.04是docker.io1sudo apt-get install docker.io 查看当前的镜像123456789# 增加 docker组sudo groupadd docker# 将当前用户加入docker组sudo gpasswd -a $&#123;USER&#125; docker# 重启docker服务sudo service docker restart# 切换当前会话到新 groupnewgrp - docker# 注意，最后一步是必须的，否则因为 groups 命令获取到的是缓存的组信息，刚添加的组信息未能生效 查看docker版本1docker version 镜像加速鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：http://hub-mirror.c.163.com。新版的 Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\docker\config\daemon.json（Windows） 来配置 Daemon。请在该配置文件中加入（没有该文件的话，请先建一个）：123&#123; &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]&#125; 搜索ubuntu镜像1docker search ubuntu 拉取ubuntu1docker pull ubuntu:16.04 进入ubuntu镜像123```### 更新 apt-get update12### 安装该装的软件 apt-get install wget xz-utils ruby build-essential libssl-dev libffi-dev libjpeg-dev libfreetype6-dev zlib1g-dev libreadline6 libreadline6-dev python3-dev libmysqlclient-dev(根据需求安装mysql依赖还是sqlite依赖) libsqlite-dev libsqlite3-dev libbz2-dev -y12### 下载python v=3.6.4wget http://mirrors.sohu.com/python/$v/Python-$v.tar.xz12### 解压 trz.xz文件 tar xvJf Python-3.6.4.tar.xz12### 编译 ./configure –enable-optimizationsmake &amp;&amp; make install12### 更新软连接 ln -s easy_install-3.6 easy_installln -s idle3 idleln -s pydoc3 pydocln -s pip3 pipln -s python3 pythonln -s python3-config python-config 12### 给自己编辑的保存一下 docker commit -m=”has update” -a=”wsqy” e218edb10161 wsqy/ubuntu:v1各个参数说明： -m:提交的描述信息 -a:指定镜像作者 e218edb10161：容器ID wsqy/ubuntu:v1:指定要创建的目标镜像名1234docker images 命令来查看我们的新镜像 `wsqy/ubuntu:v1`：![这是多次之后的镜像列表](/images/docker基础篇/多次之后的镜像列表.png)### 存出镜像 docker save -o xxx.tar [NAME]:[TAG]12### 载入镜像 docker load –input xxx.tar12&gt; tar是归档命令 没有压缩的功能 现在压缩成tar.gz tar 压缩成tar.gztar -zcvf xxx.tar.gz xxx.tar tar.gz 解压成归档文件gunzip xxx.tar.gz12### 上传镜像 docker push [NAME]:[TAG]12### 运行容器 docker run -d -v /home/qy/Desktop/dockerTest/HelloProject:/HelloProject -w /HelloProject -p 8088:8088 wsqy/eros:v6 python manage.py runserver 0.0.0.0:80881234![运行容器](/images/docker基础篇/运行容器.png)运行后将返回容器id查看在运行中的容器 docker ps12345678910111213![docker运行的进程](/images/docker基础篇/docker运行的进程.png)看到了端口映射正确则可以访问下是否运行正常![成功拉起django的测试页](/images/docker基础篇/成功拉起django的测试页.png)命令详解:-d 后台运行-v 数据卷挂载到容器-w 指定容器的主目录-p 指定端口映射### 其他的常用命令#### 停止容器 docker stop CONTAINER NAMEs 经常需要 ctrl + c 才能停止成功1#### 启动容器 docker start CONTAINER NAMEs1#### 进入容器 docker attach CONTAINER NAMEs1#### 查看容器日志 docker logs -f CONTAINER NAMEs`]]></content>
      <tags>
        <tag>docker</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小飞机-Qt5配置]]></title>
    <url>%2F2018%2F%E5%B0%8F%E9%A3%9E%E6%9C%BA-Qt5%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[参考csdn我的Linux入门之路 - 02.Shadowsocks-Qt5配置 这里我使用的是shadowsocks-Qt5版本。毕竟是从win过渡过来的，一开始还是倾向GUI。安装方法也异常简单，简单到我一开始不相信。（官方github上有安装文档。幸运的是，github可以直接访问）。三行代码即可解决，无需自己从github下载客户端。首先打开终端（Ctrl+Alt+T）然后分步运行以下三行命令。123sudo add-apt-repository ppa:hzwhuang/ss-qt5sudo apt-get updatesudo apt-get install shadowsocks-qt5 然后就安装完成了。从你的dash（左上角相当于win开始键的东西）上能找到他，拖到任务栏上创个快捷方式就好啦。打开后如下图（File菜单里有个import from gui-config.json，把你的文件导入就行了。比别的版本的ss好的是，它能导入多个服务器，而别的版本的ss的config文件貌似只能添加一个）： 命令行 也可以启动客户端sslocal -c /opt/ss.json1234567&#123; &quot;server&quot;: &quot;*.*.*.*&quot;, &quot;server_port&quot;: port_id, &quot;local_port&quot;: port_id, &quot;password&quot;: &quot;*********&quot;, &quot;method&quot;: &quot;you_method&quot;&#125; 配置终端代理挂代理的东西不少，我使用的是Polipo，和shadowsocks的socks5搭配比较不错。Polipo安装：1sudo apt-get install polipo 打开配置文件：1sudo nano /etc/polipo/config 修改配置文件：123456789# This file only needs to list configuration variables that deviate# from the default values. See /usr/share/doc/polipo/examples/config.sample# and &quot;polipo -v&quot; for variables you can tweak and further information.logSyslog = truelogFile = /var/log/polipo/polipo.logsocksParentProxy = &quot;127.0.0.1:1080&quot;socksProxyType = socks5logLevel=4 然后重启polipo：12sudo service polipo stopsudo service polipo start Polipo默认的代理地址是 http_proxy=http://localhost:8123那么每次对于希望 番羽 土啬 的指令，只需在前面加一句http_proxy=http://localhost:8123 即可。当然每次输入这么一长串这比较麻烦，可以打开～/.bashrc，在最后面添加一句1alias fanqiang=&quot;http_proxy=http://localhost:8123&quot; 这样以后只需在需要 番羽 土啬 的指令前面加一句fanqiang即可了。先来测试下有没有成功，输入：1fanqiang curl ip.gs 如果不想每条指令都输入fanqiang，可以1export http_proxy=http://localhost:8123 开机启动命令行执行1gnome-session-properties 打开的界面就像这样 添加一个123Shadowsocks-Qt5/usr/bin/ss-qt5Shadowsocks-Qt5]]></content>
      <categories>
        <category>shadowsocks</category>
        <category>ubuntu</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>shadowsocks</tag>
        <tag>ssr</tag>
        <tag>fq</tag>
        <tag>翻墙</tag>
        <tag>ssr服务端</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
