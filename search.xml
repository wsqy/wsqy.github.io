<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ubuntu下部署django项目]]></title>
    <url>%2F2018%2F07%2Fubuntu%E4%B8%8B%E9%83%A8%E7%BD%B2django%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[参考简书作者Gevin 的文章 基于nginx和uWSGI在Ubuntu上部署Django 一 前期准备 nginx1234567891011安装sudo apt-get install nginx启动、停止和重启sudo /etc/init.d/nginx startsudo /etc/init.d/nginx stopsudo /etc/init.d/nginx restart或者sudo service nginx startsudo service nginx stopsudo service nginx restart 2 安装python的一些依赖123sudo apt-get install python3-pipsudo apt-get install python3-venvsudo apt-get install python-dev 3.绑定ip到blog.viking666.com 4.在/soft目录下创建一个虚拟环境(目录权限设置好)sudo python3 -m venv blog激活虚拟环境source /soft/blog/bin/activate装一些包12pip install django==1.8pip install uwsgi 5.在/www下新建一个django项目(目录权限设置好)django-admin startproject myblog 二. 基于uWSGI和nginx部署Django1.原理the web client &lt;-&gt; the web server(nginx) &lt;-&gt; the socket &lt;-&gt; uwsgi &lt;-&gt; Django 2.基本测试测试uWSGI是否正常在myblog项目的根目录下创建test.py(/www/myblog/test.py)文件，添加源码如下：12345# test.pydef application(env, start_response): start_response(&apos;200 OK&apos;, [(&apos;Content-Type&apos;,&apos;text/html&apos;)]) # return [&quot;Hello World&quot;] # python2 return [b&quot;Hello World&quot;] # python3 然后，Run uWSGI: uwsgi --http :8000 --wsgi-file test.py参数含义: http :8000: 使用http协议，8000端口 wsgi-file test.py: 加载指定文件 test.py 打开下面url，浏览器上应该显示hello worldblog.viking666.com:8000如果显示正确，说明下面3个环节是通畅的： the web client &lt;-&gt; uWSGI &lt;-&gt; Python 测试Django项目是否正常首先确保project本身是正常的： python manage.py runserver 0.0.0.0:8000如果没问题，使用uWSGI把project拉起来： uwsgi --http :8000 --module myblog.wsgi module myblog.wsgi: 加载wsgi module 如果project能够正常被拉起，说明以下环节是通的： the web client &lt;-&gt; uWSGI &lt;-&gt; Django 三.配置nginx安装nginx完成后，如果能正常打开blog.viking666.com，说明下面环节是通畅的： the web client &lt;-&gt; the web server 增加nginx配置 将uwsgi_params文件拷贝到项目文件夹下(/www/myblog)。uwsgi_params文件在/etc/nginx/目录下，在项目文件夹下创建文件夹下创建logm目录 并在里面创建myblog.conf(/www/myblog/log/myblog.conf),填入并修改下面内容：12345678910111213141516171819202122232425262728upstream django_myblog &#123; server unix:///www/myblog/log/myblog.sock; # for a file socket # server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first)&#125;server &#123; listen 80; server_name blog.viking666.com; charset utf-8; # max upload size client_max_body_size 75M; # adjust to taste access_log /www/myblog/log/nginx_access.log; error_log /www/myblog/log/nginx_error.log; location /media &#123; alias /www/myblog/media/; &#125; location /static &#123; alias /www/myblog/static/; &#125; # Finally, send all non-media requests to the Django server. location / &#123; uwsgi_pass django_myblog; include /www/myblog/uwsgi_params; # the uwsgi_params file you installed &#125;&#125; 这个configuration文件告诉nginx从文件系统中拉起media和static文件作为服务，同时相应django的request 在/etc/nginx/sites-enabled目录下创建本文件的连接，使nginx能够使用它：1sudo ln -s /www/myblog/log/myblog.conf /etc/nginx/sites-enabled/ 部署static文件在django的setting文件中，添加下面一行内容： STATIC_ROOT = os.path.join(BASE_DIR, &quot;static/&quot;)然后运行： python manage.py collectstatic 测试nginx首先重启nginx服务： sudo /etc/init.d/nginx restart 然后检查media文件是否已经正常拉起：在目录/www/myblog/media directory下添加文件meida.png，然后访问blog.viking666.com:8000/media/media.png ，成功后进行下一步测试。 四.nginx and uWSGI and test.py执行下面代码测试能否让nginx在页面上显示hello, world1uwsgi --socket :8001 --wsgi-file test.py 访问blog.viking666.com:8000 ,如果显示hello world，则下面环节是否通畅:1the web client &lt;-&gt; the web server &lt;-&gt; the socket &lt;-&gt; uWSGI &lt;-&gt; Python 用UNIX socket取代TCP port对myblog.conf做如下修改：12server unix:///path/to/your/mysite/mysite.sock; # for a file socket# server 127.0.0.1:8001; # for a web port socket (we&apos;ll use this first) 重启nginx，并在此运行uWSGI1uwsgi --socket mysite.sock --wsgi-file test.py 打开 blog.viking666.com:8000 ，看看是否成功 如果没有成功:检查 nginx errorlog(/var/log/nginx/error.log)。如果错误如下：12connect() to unix:///path/to/your/mysite/mysite.sock failed (13: Permissiondenied) 添加socket权限再次运行：1uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=666 # (very permissive) or1uwsgi --socket mysite.sock --wsgi-file test.py --chmod-socket=664 # (more sensible) 五.Running the Django application with uswgi and nginx如果上面一切都显示正常，则下面命令可以拉起django application12uwsgi --socket mysite.sock --module mysite.wsgi --chmod-socket=664Configuring uWSGI to run with a .ini file 每次都运行上面命令拉起django application实在麻烦，使用.ini文件能简化工作，方法如下： 在log目录下创建文件myblog.ini，填入并修改下面内容：12345678910111213141516171819[uwsgi]vhost = false# plugins = pythonsocket=/www/myblog/log/myblog.sockchmod-socket = 666enable-threads = truemaster=trueprocesses = 2workers=5 harakiri=30limit-as 128max-requests=10000daemonize=/www/myblog/log/myblog.logpidfile=/www/myblog/log/myblog.pidwsgi-file=/www/myblog/myblog/wsgi.pyvirtualenv=/soft/blogchdir=/www/myblog# clear environment on exitvacuum= true 现在，只要执行以下命令，就能够拉起django application：1uwsgi --ini myblog.ini # the --ini option is used to specify a file Make uWSGI startup when the system boots编辑文件/etc/rc.local, 添加下面内容到这行代码之前exit 0:1/usr/local/bin/uwsgi --socket /path/to/mysite.sock --module /path/to/mysite.wsgi --chmod-socket=666 uWSGI的更多配置123456env = DJANGO_SETTINGS_MODULE=mysite.settings # set an environment variablepidfile = /tmp/project-master.pid # create a pidfileharakiri = 20 # respawn processes taking more than 20 secondslimit-as = 128 # limit the project to 128 MBmax-requests = 5000 # respawn processes after serving 5000 requestsdaemonize = /var/log/uwsgi/yourproject.log # background the process &amp; log]]></content>
      <categories>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>python</tag>
        <tag>django部署</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github pages + hexo搭建个人博客]]></title>
    <url>%2F2018%2F07%2Fgithub-pages-hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[参考Hexo静态博客搭建+个人定制参考Hexo+Pages静态博客-Next主题篇 环境安装确保已经安装node及gitnpm安装Hexo1npm install -g hexo-cli 建立博客项目123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 等安装完依赖后 项目就算初始化好了,博客的文件结构如下: 配置博客_config.yml就是博客项目的全局配置文件, 比如博客标题、子标题、描述、作者、语言、时区、博客地址和根地址12345678# Sitetitle: 维京博客subtitle:description:keywords:author: qiyuanlanguage: zh-Hans # 语言设置timezone: Asia/Shanghai 尝试预览Hexo常用的命令如下1234hexo clean 清除缓存hexo generate 生成静态文件hexo deploy 部署hexo server 本地预览 在开发过程中 使用hexo server或者hexo s即可本地预览,由于hexo默认存在一篇文章hello-world，所以我们可以看下情况: 创建新文章1hexo new &quot;文章标题&quot; 执行命令后 会在source/_post目录下创建同名的.md文件,这就是文章的内容，使用makedown编辑好就可以编辑完成后 预览查看效果hexo s 删除文章直接删除source/_posts文件夹下的.md文件即可,但是请注意, source/_posts下不能为空,所以请在发布一篇文章后再删除默认的文章 更换主题next下载 在项目的根目录 git clone 1git clone https://github.com/iissnan/hexo-theme-next themes/next 去github主页下载并放入themes下的文件夹中 更换主题在_config.yml文件中找到 配置项theme改成 next即可 更换风格next有四种风格 Muse Mist Pisces Gemini 如果需要更改风格 需要在主题文件夹下的_config.yml中找到scheme字段修改 Muse — 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist — Muse 的紧凑版本，整洁有序的单栏外观 Pisces — 双栏 Scheme，小家碧玉似的清新 Gemini — Pisces版本基础上 内容块更宽些 上传github pages绑定自定义域名 首先 在source目录下创建一个新文件CNAME填写自已的域名blog.test.com 添加一条域名解析, 注意类型是CNAME 更换电脑将原电脑上的项目copy新电脑上, 保留如下目录即可：12345_config.ymlpackage.jsonscaffolds/source/themes/ 确认在新电脑上已经配置好hexo环境 参考[环境安装]模块安装12345678npm installnpm install hexo-deployer-git --savenpm install hexo-generator-search --savenpm install hexo-generator-searchdb --savenpm install hexo-generator-feed --savenpm install hexo-generator-baidu-sitemap --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-seo-friendly-sitemap --save 增加社会化评论框Livere自从多说关闭后国内就没有啥好的社会化评论框了, disqus一直不错可惜国内用户用不着。百度一搜很多人都从多说转移到了 Livere 这是韩国的一款评论框，官网支持中文不说, 也支持QQ、微信、微博、豆瓣、百度等中国的一大波社交账户 非常赞。 准备工作 去Livere官网注册Livere账号。 选择City版（免费），安装 进入管理页面-&gt;代码管理-&gt;一般网站，复制data-uid加入到hexo中 如果选择的next主题的话,他已经加入了livere支持,只需要复制data-uid到主题文件夹下的_config.yml文件的livere_uid即可其他主题其他主题，请去搜索或者查找官方说明,也可借鉴Hexo之使用Livere评论代替多说评论]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
</search>
